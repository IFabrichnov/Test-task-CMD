{"version":3,"sources":["features/form/slice.js","components/Dadata.js","components/Form.js","components/AllData.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["form","createSlice","name","initialState","fio","how_old","mail","date","hours","address","reducers","updateVal","state","payload","key","val","actions","Dadata","useState","value","setValue","dispatch","useDispatch","updateValFromStore","useDebouncedCallback","inputProps","placeholder","token","onChange","event","handleChange","yesterday","Date","now","nextMonth","getFullYear","getMonth","getDate","taskSchema","Yup","shape","required","matches","min","max","email","selectFio","selectHowOld","selectEmail","selectDate","selectHours","selectAddress","Form","useSelector","navigate","useNavigate","console","log","Container","style","height","display","FlexboxGrid","align","justify","initialValues","validationSchema","onSubmit","values","setSubmitting","errors","touched","handleBlur","handleSubmit","isValid","Whisper","trigger","open","speaker","Tooltip","Input","size","type","borderColor","marginBottom","onBlur","Button","disabled","marginTop","width","AllData","allStyles","padding","border","textAlign","alignItems","Content","flexDirection","onClick","App","path","element","store","configureStore","reducer","FormReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPAEMA,EAAOC,YAAY,CACvBC,KAAM,OACNC,aAAc,CACZC,IAAK,GACLC,QAAS,GACTC,KAAM,GACNC,KAAM,GACNC,MAAO,GACPC,QAAS,IAEXC,SAAU,CACRC,UADQ,SACEC,EADF,GACqC,IAAD,IAAzBC,QAAWC,EAAc,EAAdA,IAAKC,EAAS,EAATA,IACjCH,EAAME,GAAOC,MAKJJ,EAAcX,EAAKgB,QAAnBL,UAEAX,IAAf,Q,8FCSeiB,EArBA,WACX,MAA0BC,qBAA1B,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAWC,cAEXC,EAAqBC,aAAqB,SAACV,EAAKC,GAClDM,EAASV,EAAU,CAACG,MAAKC,WAC1B,KAMH,OACI,cAAC,IAAD,CAAoBU,WAAY,CAACC,YAAa,kCAAUC,MAfhD,2CAegER,MAAOA,EAC3DS,SAAU,SAACb,EAAKc,IANnB,SAACA,GAClBT,EAASS,GAMeC,CAAaD,GACbN,EAAmB,UAAWR,OCdxDgB,EAAY,IAAIC,KAAKA,KAAKC,MAAM,OAChCC,EAAY,IAAIF,MAClB,IAAIA,MAAOG,eACX,IAAIH,MAAOI,WAAa,GACxB,IAAIJ,MAAOK,WAGTC,EAAaC,MAAaC,MAAM,CAClCpC,IAAKmC,MAAaE,SAAS,+FAAoBC,QAAQ,4tdAAmB,wGAC1ErC,QAASkC,MAAaI,IAAI,EAAG,6JAAgCC,IAAI,IAAK,6CAAeH,SAAS,+FAC9FnC,KAAMiC,MAAaM,MAAM,yCAAgBJ,SAAS,+FAClDlC,KAAMgC,MAAWI,IAAIZ,EAAU,4IAA8Ba,IAAIV,EAAW,+HAA2BO,SAAS,+FAChHjC,MAAO+B,MAAaE,SAAS,iGAG3BK,EAAY,SAAClC,GAAD,OAAWA,EAAMZ,KAAKI,KAClC2C,EAAe,SAACnC,GAAD,OAAWA,EAAMZ,KAAKK,SACrC2C,EAAc,SAACpC,GAAD,OAAWA,EAAMZ,KAAKM,MACpC2C,EAAa,SAACrC,GAAD,OAAWA,EAAMZ,KAAKO,MACnC2C,EAAc,SAACtC,GAAD,OAAWA,EAAMZ,KAAKQ,OACpC2C,EAAgB,SAACvC,GAAD,OAAWA,EAAMZ,KAAKS,SAkL7B2C,EAhLF,WACT,IAAM/B,EAAWC,cACXlB,EAAMiD,YAAYP,GAClBzC,EAAUgD,YAAYN,GACtBzC,EAAO+C,YAAYL,GACnBzC,EAAO8C,YAAYJ,GACnBzC,EAAQ6C,YAAYH,GACpBzC,EAAU4C,YAAYF,GACtBG,EAAWC,cAEXhC,EAAqBC,aAAqB,SAACV,EAAKC,GAClDyC,QAAQC,IAAI,CAAC3C,MAAKC,QAClBM,EAASV,EAAU,CAACG,MAAKC,WAC1B,KAEH,OACI,cAAC2C,EAAA,EAAD,CAAWC,MAAO,CAACC,OAAQ,QAASC,QAAS,QAA7C,SACI,cAACC,EAAA,EAAD,CAAaC,MAAM,SAASC,QAAQ,SAASL,MAAO,CAACC,OAAQ,QAA7D,SACI,cAAC,IAAD,CACIK,cAAe,CACX7D,IAAKA,EACLC,QAASA,EACTC,KAAMA,EACNC,KAAMA,EACNC,MAAOA,EACPC,QAASA,GAEbyD,iBAAkB5B,EAClB6B,SAAU,SAACC,EAAD,GAA8B,IAApBC,EAAmB,EAAnBA,cAChBf,EAAS,aACTe,GAAc,IAZtB,SAeK,YAQQ,IAPHD,EAOE,EAPFA,OACAE,EAME,EANFA,OACAC,EAKE,EALFA,QACAzC,EAIE,EAJFA,aACA0C,EAGE,EAHFA,WACAC,EAEE,EAFFA,aACAC,EACE,EADFA,QAEF,OACI,uBAAMP,SAAUM,EAAhB,UACI,cAACE,EAAA,EAAD,CACIC,QAAQ,OACRC,KAAMP,EAAOlE,KAAOmE,EAAQnE,IAC5B0E,QAAS,cAACC,EAAA,EAAD,UAAUT,EAAOlE,MAH9B,SAKI,cAAC4E,EAAA,EAAD,CACIC,KAAK,KACLC,KAAK,OACLhF,KAAK,MACLwB,YAAY,qBACZiC,MAAO,CACHwB,YACIb,EAAOlE,KAAOmE,EAAQnE,IAAM,MAAQ,UACxCgF,aAAc,IAElBxD,SAAU,SAACb,EAAKc,GACZC,EAAaD,GACbN,EAAmB,MAAOR,IAE9BsE,OAAQb,EACRrD,MAAOiD,EAAOhE,QAGtB,cAACuE,EAAA,EAAD,CACIC,QAAQ,OACRC,KAAMP,EAAOjE,SAAWkE,EAAQlE,QAChCyE,QAAS,cAACC,EAAA,EAAD,UAAUT,EAAOjE,UAH9B,SAKI,cAAC2E,EAAA,EAAD,CACIC,KAAK,KACLC,KAAK,SACLhF,KAAK,UACLwB,YAAY,6CACZiC,MAAO,CACHwB,YACIb,EAAOjE,SAAWkE,EAAQlE,QAAU,MAAQ,UAChD+E,aAAc,IAElBxD,SAAU,SAACb,EAAKc,GACZC,EAAaD,GACbN,EAAmB,UAAWR,IAElCsE,OAAQb,EACRrD,MAAOiD,EAAO/D,YAItB,cAACsE,EAAA,EAAD,CACIC,QAAQ,OACRC,KAAMP,EAAOhE,MAAQiE,EAAQjE,KAC7BwE,QAAS,cAACC,EAAA,EAAD,UAAUT,EAAOhE,OAH9B,SAKI,cAAC0E,EAAA,EAAD,CACIC,KAAK,KACLC,KAAK,QACLhF,KAAK,OACLwB,YAAY,QACZiC,MAAO,CACHwB,YACIb,EAAOhE,MAAQiE,EAAQjE,KAAO,MAAQ,UAC1C8E,aAAc,IAElBxD,SAAU,SAACb,EAAKc,GACZC,EAAaD,GACbN,EAAmB,OAAQR,IAE/BsE,OAAQb,EACRrD,MAAOiD,EAAO9D,SAGtB,cAACqE,EAAA,EAAD,CACIC,QAAQ,OACRC,KAAMP,EAAO/D,MAAQgE,EAAQhE,KAC7BuE,QAAS,cAACC,EAAA,EAAD,UAAUT,EAAO/D,OAH9B,SAKI,cAACyE,EAAA,EAAD,CACIC,KAAK,KACLC,KAAK,OACLhF,KAAK,OACLwB,YAAY,2BACZiC,MAAO,CACHwB,YACIb,EAAO/D,MAAQgE,EAAQhE,KAAO,MAAQ,UAC1C6E,aAAc,IAElBxD,SAAU,SAACb,EAAKc,GACZC,EAAaD,GACbN,EAAmB,OAAQR,IAE/BsE,OAAQb,EACRrD,MAAOiD,EAAO7D,SAItB,cAACoE,EAAA,EAAD,CACIC,QAAQ,OACRC,KAAMP,EAAO9D,OAAS+D,EAAQ/D,MAC9BsE,QAAS,cAACC,EAAA,EAAD,UAAUT,EAAO9D,QAH9B,SAKI,cAACwE,EAAA,EAAD,CACIC,KAAK,KACLC,KAAK,OACLhF,KAAK,QACLwB,YAAY,iCACZiC,MAAO,CACHwB,YACIb,EAAO9D,OAAS+D,EAAQ/D,MAAQ,MAAQ,UAC5C4E,aAAc,IAElBxD,SAAU,SAACb,EAAKc,GACZC,EAAaD,GACbN,EAAmB,QAASR,IAEhCsE,OAAQb,EACRrD,MAAOiD,EAAO5D,UAItB,cAAC,EAAD,IAEA,cAAC8E,EAAA,EAAD,CAAQJ,KAAK,SAASK,UAAWb,EAASf,MAAO,CAAC6B,UAAW,OAAQC,MAAO,QAA5E,+E,SChMjB,SAASC,IACpB,MAAqDrC,aAAY,SAACzC,GAAD,OAAWA,EAAMZ,QAA1EI,EAAR,EAAQA,IAAKC,EAAb,EAAaA,QAASC,EAAtB,EAAsBA,KAAMC,EAA5B,EAA4BA,KAAME,EAAlC,EAAkCA,QAASD,EAA3C,EAA2CA,MACrC8C,EAAWC,cAEXoC,EAAY,CAACC,QAAS,MAAOC,OAAQ,YAAaC,UAAW,UAEnE,OACI,cAACpC,EAAA,EAAD,CAAWC,MAAO,CAACE,QAAS,OAAQkC,WAAY,SAAUP,UAAW,SAArE,SACI,eAACQ,EAAA,EAAD,CAASrC,MAAO,CAACE,QAAS,OAAQoC,cAAe,UAAjD,UACI,sBAAKtC,MAAOgC,EAAZ,iCAA6BvF,KAC7B,sBAAKuD,MAAOgC,EAAZ,yDAAiCtF,KACjC,sBAAKsD,MAAOgC,EAAZ,oBAA+BrF,KAC/B,sBAAKqD,MAAOgC,EAAZ,uCAA8BpF,KAC9B,sBAAKoD,MAAOgC,EAAZ,6CAA+BnF,KAC/B,sBAAKmD,MAAOgC,EAAZ,6CAA+BlF,EAAQU,SAEvC,wBAAQwC,MAAO,CAACiC,QAAS,MAAOJ,UAAW,QAASN,KAAK,SAASgB,QAAS,kBAAM5C,GAAU,IAA3F,iDCHD6C,MAXf,WACE,OACE,cAACzC,EAAA,EAAD,UACE,eAAC,IAAD,WACI,cAAC,IAAD,CAAO0C,KAAK,IAAIC,QAAS,cAAC,EAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,WAAWC,QAAS,cAACX,EAAD,YCV7BY,EAAQC,YAAe,CAClCC,QAAS,CACPxG,KAAMyG,KCQUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCTNC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACI,cAAC,IAAD,UACI,cAAC,EAAD,UAIZY,SAASC,eAAe,SDkHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.c8d4883a.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst form = createSlice({\r\n  name: 'form',\r\n  initialState: {\r\n    fio: '',\r\n    how_old: '',\r\n    mail: '',\r\n    date: '',\r\n    hours: '',\r\n    address: ''\r\n  },\r\n  reducers: {\r\n    updateVal(state, { payload: { key, val } }) {\r\n      state[key] = val\r\n    },\r\n  },\r\n})\r\n\r\nexport const { updateVal } = form.actions\r\n\r\nexport default form.reducer\r\n","import React, {useState} from \"react\";\r\nimport {AddressSuggestions} from \"react-dadata\";\r\nimport \"react-dadata/dist/react-dadata.css\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useDebouncedCallback} from \"use-debounce\";\r\nimport {updateVal} from \"../features\";\r\n\r\nconst API_KEY = \"3c2e964517d7358776e07d7d699cc2b0626dac54\";\r\n\r\nconst Dadata = () => {\r\n    const [value, setValue] = useState();\r\n    const dispatch = useDispatch();\r\n\r\n    const updateValFromStore = useDebouncedCallback((key, val) => {\r\n        dispatch(updateVal({key, val}))\r\n    }, 250)\r\n\r\n    const handleChange = (event) => {\r\n        setValue(event);\r\n    }\r\n\r\n    return (\r\n        <AddressSuggestions inputProps={{placeholder: \"Адрес\"}} token={API_KEY} value={value}\r\n                            onChange={(val, event) => {\r\n                                handleChange(event)\r\n                                updateValFromStore('address', val)\r\n                            }}/>\r\n    );\r\n};\r\n\r\nexport default Dadata;\r\n","import React from 'react'\r\nimport { Formik } from 'formik'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { updateVal } from '../features/form/slice'\r\nimport { FlexboxGrid, Button, Container, Input, Whisper, Tooltip } from 'rsuite'\r\nimport * as Yup from 'yup';\r\nimport { useDebouncedCallback } from 'use-debounce'\r\nimport Dadata from \"./Dadata\";\r\n\r\n// даты для валидации Date\r\nconst yesterday = new Date(Date.now()-86400000);\r\nconst nextMonth = new Date(\r\n    new Date().getFullYear(),\r\n    new Date().getMonth() + 1,\r\n    new Date().getDate()\r\n);\r\n\r\nconst taskSchema = Yup.object().shape({\r\n    fio: Yup.string().required('Поле обязательно').matches(/\\p{L}+\\s\\p{L}+/u, 'Нужно больее 1 слова'),\r\n    how_old: Yup.number().min(0, 'Не должно быть отрицательным').max(150, 'Не выше 150').required('Поле обязательно'),\r\n    mail: Yup.string().email('Это не email').required('Поле обязательно'),\r\n    date: Yup.date().min(yesterday,'Минимальная дата - сегодня').max(nextMonth, 'Не больше месяца вперед').required('Поле обязательно'),\r\n    hours: Yup.string().required('Поле обязательно')\r\n});\r\n\r\nconst selectFio = (state) => state.form.fio;\r\nconst selectHowOld = (state) => state.form.how_old;\r\nconst selectEmail = (state) => state.form.mail;\r\nconst selectDate = (state) => state.form.date;\r\nconst selectHours = (state) => state.form.hours;\r\nconst selectAddress = (state) => state.form.address;\r\n\r\nconst Form = () => {\r\n    const dispatch = useDispatch();\r\n    const fio = useSelector(selectFio);\r\n    const how_old = useSelector(selectHowOld);\r\n    const mail = useSelector(selectEmail);\r\n    const date = useSelector(selectDate);\r\n    const hours = useSelector(selectHours);\r\n    const address = useSelector(selectAddress);\r\n    const navigate = useNavigate();\r\n\r\n    const updateValFromStore = useDebouncedCallback((key, val) => {\r\n        console.log({key, val})\r\n        dispatch(updateVal({key, val}))\r\n    }, 250)\r\n\r\n    return (\r\n        <Container style={{height: '100vh', display: 'flex'}}>\r\n            <FlexboxGrid align=\"middle\" justify=\"center\" style={{height: '100%'}}>\r\n                <Formik\r\n                    initialValues={{\r\n                        fio: fio,\r\n                        how_old: how_old,\r\n                        mail: mail,\r\n                        date: date,\r\n                        hours: hours,\r\n                        address: address\r\n                    }}\r\n                    validationSchema={taskSchema}\r\n                    onSubmit={(values, {setSubmitting}) => {\r\n                        navigate(\"/all-data\");\r\n                        setSubmitting(false)\r\n                    }}\r\n                >\r\n                    {({\r\n                          values,\r\n                          errors,\r\n                          touched,\r\n                          handleChange,\r\n                          handleBlur,\r\n                          handleSubmit,\r\n                          isValid,\r\n                      }) => {\r\n                        return (\r\n                            <form onSubmit={handleSubmit}>\r\n                                <Whisper\r\n                                    trigger=\"none\"\r\n                                    open={errors.fio && touched.fio}\r\n                                    speaker={<Tooltip>{errors.fio}</Tooltip>}\r\n                                >\r\n                                    <Input\r\n                                        size=\"lg\"\r\n                                        type=\"text\"\r\n                                        name=\"fio\"\r\n                                        placeholder=\"ФИО\"\r\n                                        style={{\r\n                                            borderColor:\r\n                                                errors.fio && touched.fio ? 'red' : 'inherit',\r\n                                            marginBottom: 20,\r\n                                        }}\r\n                                        onChange={(val, event) => {\r\n                                            handleChange(event)\r\n                                            updateValFromStore('fio', val)\r\n                                        }}\r\n                                        onBlur={handleBlur}\r\n                                        value={values.fio}\r\n                                    />\r\n                                </Whisper>\r\n                                <Whisper\r\n                                    trigger=\"none\"\r\n                                    open={errors.how_old && touched.how_old}\r\n                                    speaker={<Tooltip>{errors.how_old}</Tooltip>}\r\n                                >\r\n                                    <Input\r\n                                        size=\"lg\"\r\n                                        type=\"number\"\r\n                                        name=\"how_old\"\r\n                                        placeholder=\"Возраст\"\r\n                                        style={{\r\n                                            borderColor:\r\n                                                errors.how_old && touched.how_old ? 'red' : 'inherit',\r\n                                            marginBottom: 20,\r\n                                        }}\r\n                                        onChange={(val, event) => {\r\n                                            handleChange(event)\r\n                                            updateValFromStore('how_old', val)\r\n                                        }}\r\n                                        onBlur={handleBlur}\r\n                                        value={values.how_old}\r\n                                    />\r\n                                </Whisper>\r\n\r\n                                <Whisper\r\n                                    trigger=\"none\"\r\n                                    open={errors.mail && touched.mail}\r\n                                    speaker={<Tooltip>{errors.mail}</Tooltip>}\r\n                                >\r\n                                    <Input\r\n                                        size=\"lg\"\r\n                                        type=\"email\"\r\n                                        name=\"mail\"\r\n                                        placeholder=\"Email\"\r\n                                        style={{\r\n                                            borderColor:\r\n                                                errors.mail && touched.mail ? 'red' : 'inherit',\r\n                                            marginBottom: 20,\r\n                                        }}\r\n                                        onChange={(val, event) => {\r\n                                            handleChange(event)\r\n                                            updateValFromStore('mail', val)\r\n                                        }}\r\n                                        onBlur={handleBlur}\r\n                                        value={values.mail}\r\n                                    />\r\n                                </Whisper>\r\n                                <Whisper\r\n                                    trigger=\"none\"\r\n                                    open={errors.date && touched.date}\r\n                                    speaker={<Tooltip>{errors.date}</Tooltip>}\r\n                                >\r\n                                    <Input\r\n                                        size=\"lg\"\r\n                                        type=\"date\"\r\n                                        name=\"date\"\r\n                                        placeholder=\"Дата\"\r\n                                        style={{\r\n                                            borderColor:\r\n                                                errors.date && touched.date ? 'red' : 'inherit',\r\n                                            marginBottom: 20,\r\n                                        }}\r\n                                        onChange={(val, event) => {\r\n                                            handleChange(event)\r\n                                            updateValFromStore('date', val)\r\n                                        }}\r\n                                        onBlur={handleBlur}\r\n                                        value={values.date}\r\n                                    />\r\n                                </Whisper>\r\n\r\n                                <Whisper\r\n                                    trigger=\"none\"\r\n                                    open={errors.hours && touched.hours}\r\n                                    speaker={<Tooltip>{errors.hours}</Tooltip>}\r\n                                >\r\n                                    <Input\r\n                                        size=\"lg\"\r\n                                        type=\"time\"\r\n                                        name=\"hours\"\r\n                                        placeholder=\"Время\"\r\n                                        style={{\r\n                                            borderColor:\r\n                                                errors.hours && touched.hours ? 'red' : 'inherit',\r\n                                            marginBottom: 20,\r\n                                        }}\r\n                                        onChange={(val, event) => {\r\n                                            handleChange(event)\r\n                                            updateValFromStore('hours', val)\r\n                                        }}\r\n                                        onBlur={handleBlur}\r\n                                        value={values.hours}\r\n                                    />\r\n                                </Whisper>\r\n\r\n                                <Dadata />\r\n\r\n                                <Button type=\"submit\" disabled={!isValid} style={{marginTop: '20px', width: '100%'}}>\r\n                                    Отправить\r\n                                </Button>\r\n                            </form>\r\n                        )\r\n                    }}\r\n                </Formik>\r\n            </FlexboxGrid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import React from 'react';\r\nimport { Container, Content } from 'rsuite';\r\nimport { useSelector} from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport default function AllData() {\r\n    const { fio, how_old, mail, date, address, hours } = useSelector((state) => state.form);\r\n    const navigate = useNavigate();\r\n\r\n    const allStyles = {padding: '5px', border: '1px solid', textAlign: 'center'};\r\n\r\n    return (\r\n        <Container style={{display: 'flex', alignItems: 'center', marginTop: '100px'}}>\r\n            <Content style={{display: 'flex', flexDirection: 'column'}}>\r\n                <div style={allStyles}>ФИО: {fio}</div>\r\n                <div style={allStyles}>Возраст: {how_old}</div>\r\n                <div style={allStyles}>Email: {mail}</div>\r\n                <div style={allStyles}>Дата: {date}</div>\r\n                <div style={allStyles}>Время: {hours}</div>\r\n                <div style={allStyles}>Адрес: {address.value}</div>\r\n\r\n                <button style={{padding: '5px', marginTop: '10px'}} type=\"submit\" onClick={() => navigate(-1)}>Назад</button>\r\n            </Content>\r\n        </Container>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport 'rsuite/dist/styles/rsuite-default.css'\r\nimport { Container } from 'rsuite'\r\nimport { Form } from './features'\r\nimport AllData from './components/AllData'\r\nimport { Routes, Route } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Container>\r\n      <Routes>\r\n          <Route path=\"/\" element={<Form />} />\r\n          <Route path=\"all-data\" element={<AllData />} />\r\n      </Routes>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport { FormReducer } from '../features'\r\nexport const store = configureStore({\r\n  reducer: {\r\n    form: FormReducer,\r\n  },\r\n})\r\n","// This optional code is used to form a service worker.\r\n// form() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just form service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <App/>\r\n            </BrowserRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to form() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}